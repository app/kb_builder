#!/usr/bin/env python
"""Script to generate keyboard plates and cases from KLE data.

By default this reads the data on stdin. You can also use --file to pass data
in through a file.
"""
import argparse
import hashlib
import hjson
import logging
import sys
from time import time
import config
from builder import KeyboardCase


# Setup logging
logging.basicConfig()

# Parse our command line args
parser = argparse.ArgumentParser()
parser.add_argument('-f', '--file', help='File containing the KLE data')
parser.add_argument('-n', '--name', help='Output file basename (Default: generate a hash or use -f)')
parser.add_argument('--switch', help='Switch type: mx, (*)alpsmx, mx-open, mx-open-rotatable, alps')
parser.add_argument('--stab', help='Stabilizer type: cherry, costar, (*)cherry-costar, alps, matias')
parser.add_argument('--case', help='Case type: (*)none, poker, sandwich')
parser.add_argument('--case-holes', default=8, type=int, help='Number of screw holes in the case (Default: 8)')
parser.add_argument('--foot-hole', default=[], action='append', help="The X,Y location for a foot's screw-hole")
parser.add_argument('--foot-count', default=0, type=int, help='Number of feet to include in the open/closed layers (Default: 1 per foot hole)')
parser.add_argument('--hole-diameter', default=5, type=float, help='Case hole size in mm (Default: 5)')
parser.add_argument('--usb-offset', default=0, type=float, help='Offset from center for USB connector')
parser.add_argument('--usb-inner-width', default=10, type=float, help='Width for the USB connector cutout closest to the PCB')
parser.add_argument('--usb-outer-width', default=14, type=float, help='Width for the USB connector cutout furthest from the PCB')
parser.add_argument('--usb-height', default=6, type=float, help='How far down the bottom plate to cut to allow for the USB connector')
parser.add_argument('--usb-layer', default=['open'], action='append', help='Add the USB cutout to a layer')
parser.add_argument('--reinforcing', default=False, action='store_true', help='Add the reinforcing plate to a non-case layout')
parser.add_argument('--height', default=6, type=float, help='Amount to pad the height (Default: 6)')
parser.add_argument('--width', default=6, type=float, help='Amount to pad the width (Default: 6)')
parser.add_argument('--hole', default=[], action='append', help='Add a hole at X,Y,Diameter')
parser.add_argument('--pcb-height', default=0, type=float, help='Amount to pad the height of the cutout to accommodate a pcb (Default: 0)')
parser.add_argument('--pcb-width', default=0, type=float, help='Amount to pad the width of the cutout to accommodate a pcb (Default: 0)')
parser.add_argument('--corners', default=0, type=float, help='Radius for corners, 0 to disable (Default: 0)')
parser.add_argument('--corner-type', default='round', type=str, help='What kind of corners to make (*round, beveled)')
parser.add_argument('--thickness', default=0, type=float, help='Plate thickness, 0 to disable (Default: 0)')
parser.add_argument('--kerf', default=0, type=float, help='Kerf, 0 to disable (Default: 0)')
parser.add_argument('--add-format', default=[], action='append', help='Add a format to be exported (brp, stp, stl)')
parser.add_argument('--output-dir', type=str, help='What directory to output files to (Default: %s)' % config.app['export'])
parser.add_argument('--oversize', default=[], action='append', help='Make a layer larger than the other layers')
parser.add_argument('--oversize-distance', type=int, default=4, help='How much larger an oversized layer is')
parser.add_argument('--only', help="Only create a single layer.")
args = parser.parse_args()

# Make sure the corners are specified correctly
if args.corner_type not in ('round', 'beveled'):
    logging.error('Incorrect corner type: %s', args.corner_type)
    exit(1)

# Figure out what kind of switch it is
if args.switch:
    if args.switch not in ('mx', 'alpsmx', 'mx-open', 'mx-open-rotatable', 'alps'):
        logging.error('Unknown switch type: %s', args.switch)
        exit(1)
else:
    args.switch = 'mx'

# Figure out what kind of stab it is
if args.stab:
    if args.stab not in ('cherry', 'costar', 'cherry-costar', 'matias', 'alps'):
        logging.error('Unknown stab type: %s', args.stab)
        exit(1)
else:
    args.stab = 'cherry-costar'

# Figure out what kind of case it is
if args.case:
    if args.case == 'none':
        args.case = ''
    elif args.case not in ('none', 'poker', 'sandwich'):
        logging.error('Unknown case type: %s', args.case)
        exit(1)

# Add any designated holes
holes = []
if args.hole:
    for hole in args.hole:
        x, y, diameter = hole.split(',')  # Make sure it's in the right format
        if x[0] == '\\':
            x = x[1:]
        holes.append((float(x), float(y), float(diameter)))

# Figure out how many feet to include
if args.foot_hole and not args.foot_count:
    args.foot_count = len(args.foot_hole)

for i, foot in enumerate(args.foot_hole):
    args.foot_hole[i] = map(float, foot.split(','))

# Determine what formats to support
for format in args.add_format:
    config.app['formats'].append(format)

# Set our output directory
if args.output_dir:
    config.app['export'] = args.output_dir

# MAIN
if __name__ == '__main__':
    if args.file:
        layout = open(args.file).read()
    else:
        if sys.stdin.isatty():
            print '*** Paste the KLE data here and press Ctrl-D to process it:'
        layout = sys.stdin.read()

    layout = '{"layout": [' + layout + ']}'
    layout = hjson.loads(layout)['layout']
    builder_args = {
        'formats': config.app['formats'],
        'switch_type': args.switch,
        'stab_type': args.stab,
        'case_type': args.case,
        'mount_holes_num': args.case_holes,
        'mount_holes_size': args.hole_diameter,
        'width_padding': args.width,
        'height_padding': args.height,
        'pcb_width_padding': args.pcb_width,
        'pcb_height_padding': args.pcb_height,
        'corners': args.corners,
        'corner_type': args.corner_type,
        'thickness': args.thickness,
        'kerf': args.kerf,
        'reinforcing': args.reinforcing,
        'usb_inner_width': args.usb_inner_width,
        'usb_outer_width': args.usb_outer_width,
        'usb_height': args.usb_height,
        'usb_offset': args.usb_offset,
        'usb_layers': args.usb_layer,
        'keyboard_layout': layout,
        'oversize': args.oversize,
        'oversize_distance': args.oversize_distance,
        'foot_count': args.foot_count,
        'foot_holes': args.foot_hole
    }

    # Figure out the export file name
    if args.name:
        export_basename = args.name
    elif args.file:
        export_basename = args.file
    else:
        export_basename = hjson.dumps(builder_args, sort_keys=True)
        export_basename = hashlib.sha1(export_basename).hexdigest()
    builder_args['export_basename'] = export_basename

    # Remove default options
    if args.case == '':
        del(builder_args['mount_holes_size'])
        del(builder_args['mount_holes_num'])

    if args.height == 0:
        del(builder_args['height_padding'])

    if args.width == 0:
        del(builder_args['width_padding'])

    if args.thickness == 0:
        del(builder_args['thickness'])

    if args.corners == 0:
        del(builder_args['corners'])

    if args.kerf == 0:
        del(builder_args['kerf'])

    # Add any holes
    if holes:
        builder_args['holes'] = holes

    # Build the plate
    build_start = time()
    logging.info("Processing: %s" % (export_basename))
    case = KeyboardCase(**builder_args)

    # Create the shape based layers
    layers = (
        # (layer_name, create_function)
        ('simple', case.init_plate),
        ('bottom', case.create_bottom_layer),
        ('closed', case.create_closed_layer),
        ('open', case.create_open_layer),
    )
    for layer, create_layer in layers:
        if args.only and args.only != layer:
            continue

        if layer in case.layers:
            plate = create_layer(oversize=case.oversize_distance if layer in case.oversize else 0)
            case.export(plate, layer)

    # Create the switch based layers
    for layer in ('switch', 'reinforcing', 'top'):
        if args.only and args.only != layer:
            continue

        if layer in case.layers:
            plate = case.create_switch_layer(layer)
            case.export(plate, layer)

    logging.info("Finished: %s" % (export_basename))
    logging.info("Processing took: {0:.2f} seconds".format(time()-build_start))

    # Display info about the plates
    print '**** Overall plate size: %s x %s mm' % (case.width, case.height)

    for layer in case.layers:
        if args.only and args.only != layer:
            continue

        print '*** Files exported for plate', layer
        for file in case.exports[layer]:
            print '*', file['url'][1:]
